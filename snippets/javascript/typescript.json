{
  "Interface Definition": {
    "prefix": "iface",
    "body": ["interface ${1:name} {", "\t$0", "}"],
    "description": "Interface Definition"
  },
  "Type Definition": {
    "prefix": "tface",
    "body": ["type ${1:name} = {", "\t$0", "}"],
    "description": "Type Definition "
  },
  "Export Interface Definition": {
    "prefix": "expint",
    "body": ["export interface ${1:name} {", "\t$0", "}"],
    "description": "Interface Definition Export"
  },
  "Export Type Definition": {
    "prefix": "exptp",
    "body": ["export type ${1:first} = {${2:second}}"],
    "description": "Type Definition Export"
  },
  "Public Method Definition": {
    "prefix": "public method",
    "body": ["/**", " * ${1:name}", " */", "public ${1:name}() {", "\t$0", "}"],
    "description": "Public Method Definition"
  },
  "Private Method Definition": {
    "prefix": "private method",
    "body": ["private ${1:name}() {", "\t$0", "}"],
    "description": "Private Method Definition"
  },
  "Function Statement": {
    "prefix": "fn",
    "body": ["function ${1:name}(${2:params}:${3:type}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "Property getter": {
    "prefix": "get",
    "body": [
      "",
      "public get ${1:value}() : ${2:string} {",
      "\t${3:return $0}",
      "}",
      ""
    ],
    "description": "Property getter"
  },
  "Define a full property": {
    "prefix": "prop",
    "body": [
      "",
      "private _${1:value} : ${2:string};",
      "public get ${1:value}() : ${2:string} {",
      "\treturn this._${1:value};",
      "}",
      "public set ${1:value}(v : ${2:string}) {",
      "\tthis._${1:value} = v;",
      "}",
      ""
    ],
    "description": "Define a full property"
  },
  "Triple-slash reference": {
    "prefix": "ref",
    "body": ["/// <reference path=\"$1\" />", "$0"],
    "description": "Triple-slash reference"
  },
  "Stories template": {
    "scope": "typescriptreact",
    "prefix": "sb",
    "description": "典型的 Stories 模板",
    "body": [
      "import ${1:YourComponent} from '@/components/${1:YourComponent}';",
      "import type { Meta, StoryObj } from '@storybook/react';",
      "import { useState } from 'react';",
      "",
      "type Story = StoryObj<typeof ${1:YourComponent}>;",
      "",
      "/** 元信息定义，最主要的就是 title/component/argTypes */",
      "const meta: Meta<typeof ${1:YourComponent}> = {",
      "  /** 分类和组件名 👉 */",
      "  title: '${2:一级分类}/${1:YourComponent}',",
      "  component: ${1:YourComponent},",
      "  // 描述组件接受的 props，效果见右图 👉",
      "  // 这里其实不需要每个属性都手动写一遍，sb 会自动读你的 Props 类型定义(底层是 react-docgen)",
      "  // 将属性枚举出来（不过小坑的是，不能用 FC 去 annotate 你的组件，否则它会读不到！",
      "  argTypes: {",
      "    /** control 支持的值文档看这里 https://storybook.js.org/docs/essentials/controls#annotation */",
      "    someProp: { control: 'boolean', description: '是否xxxxxx' },",
      "    // ...",
      "  },",
      "  /* OPTIONAL: 这里可以给每个 story 加公共容器 */",
      "  decorators: [",
      "    (Story) => (<div className='w-[支持TailwindCSS]'><Story /></div>),",
      "  ],",
      "  parameters: {",
      "    // 把你的邮箱写上，这样界面上用户能够快速的 link 到你",
      "    // 点击可以打开飞书聊天窗",
      "    contributor: '${3:youremail}@bytedance.com'",
      "  }",
      "};",
      "",
      "/** 每导出一个 Story, 就会在导航栏里新增一个子项 👉*/",
      "export const Default: Story = {",
      "  render: (args) => {",
      "    /** 如果是受控的表单组件，你需要自己传入 value 和 onChange，argTypes 不好使 */",
      "    // eslint-disable-next-line react-hooks/rules-of-hooks",
      "    const [val, setVal] = useState<string[] | undefined>(['a', 'b']);",
      "    return <${1:YourComponent} value={val} onChange={setVal} {...args} />;",
      "  },",
      "};",
      "",
      "export const Sortable: Story = {",
      "  args: {",
      "    someProp: true,",
      "  },",
      "  render: (args) => {",
      "    // eslint-disable-next-line react-hooks/rules-of-hooks",
      "    const [val, setVal] = useState<string[] | undefined>(['1', '2', '3']);",
      "    return <${1:YourComponent} value={val} onChange={setVal} {...args} />;",
      "  },",
      "};",
      "",
      "export default meta;"
    ]
  },
  "Visible State Definition": {
    "prefix": "vs",
    "body": ["const [visible, setVisible] = useState(false);"],
    "description": "Visible State Definition"
  },
  "Open Function Definition": {
    "prefix": "of",
    "body": ["const open = () => {", "\tsetVisible(true);", "};\n"],
    "description": "Open Function Definition"
  },
  "Close Function Definition": {
    "prefix": "cf",
    "body": ["const close = () => {", "\tsetVisible(false);", "};\n"],
    "description": "Close Function Definition"
  }
}
